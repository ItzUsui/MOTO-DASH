#!/usr/bin/env python3
import sys
import math
import pygame
import pygame.gfxdraw
from pygame.locals import *

# 1080×1080 round screen
SCREEN_WIDTH  = 1080
SCREEN_HEIGHT = 1080
CENTER_X = SCREEN_WIDTH // 2
CENTER_Y = SCREEN_HEIGHT // 2

# Outermost radius of the circular screen
SCREEN_RADIUS = 540

# Speed range
MAX_SPEED = 200.0
# RPM range
MAX_RPM   = 13000.0

# Colors
BLACK   = (0,   0,   0)
WHITE   = (255, 255, 255)
GREEN   = (0,   200, 0)
YELLOW  = (255, 220, 0)
RED     = (255, 0,   0)

################################################################################
# Anti-Aliased Arc Polygon Helpers
################################################################################

def build_arc_polygon(angle_start_deg, angle_end_deg, outer_radius, thickness, steps=360):
    """
    Build a list of points forming a polygon for an arc from angle_start_deg..angle_end_deg
    (in "dashboard" angle system: 0°=top, angles increase clockwise).
    """
    pts = []
    step_size = (angle_end_deg - angle_start_deg) / steps

    # Outer boundary
    for i in range(steps+1):
        a_deg = angle_start_deg + i * step_size
        rads  = math.radians(-a_deg + 90)
        x_out = CENTER_X + outer_radius * math.cos(rads)
        y_out = CENTER_Y - outer_radius * math.sin(rads)
        pts.append((x_out, y_out))

    # Inner boundary
    inner_radius = outer_radius - thickness
    for i in range(steps+1):
        a_deg = angle_end_deg - i * step_size
        rads  = math.radians(-a_deg + 90)
        x_in = CENTER_X + inner_radius * math.cos(rads)
        y_in = CENTER_Y - inner_radius * math.sin(rads)
        pts.append((x_in, y_in))

    return pts

def draw_arc_polygon_aa(surface, arc_pts, color):
    """Draw an arc polygon with anti-aliasing via gfxdraw."""
    pygame.gfxdraw.filled_polygon(surface, arc_pts, color)
    pygame.gfxdraw.aapolygon(surface, arc_pts, color)

def draw_arc_segment_aa(surface, a_start, a_end, outer_radius, thickness, color, overlap_deg=0.0):
    """Build & draw an anti-aliased arc polygon from a_start..a_end."""
    if a_end < a_start:
        a_start, a_end = a_end, a_start

    arc_pts = build_arc_polygon(a_start - overlap_deg,
                                a_end   + overlap_deg,
                                outer_radius,
                                thickness,
                                steps=360)
    draw_arc_polygon_aa(surface, arc_pts, color)

################################################################################
# SPEED BAR (Thicker)
################################################################################

def draw_speed_bar(surface, speed):
    """
    Speedometer bar from angles 150..390, now "bigger" by using thickness=120.
    Outer radius=540 => inner radius=420. Single color fill (white).
    """
    angle_start = 150
    angle_end   = 390
    overlap_deg = 0.2
    bar_thickness = 120  # bigger thickness => 540..420

    # 1) Outer white border ring
    border_t = 10
    draw_arc_segment_aa(surface, angle_start, angle_end,
                        SCREEN_RADIUS, border_t, WHITE)

    # 2) Black track behind
    track_outer = SCREEN_RADIUS - border_t  # e.g. 530
    track_thick = bar_thickness - border_t  # e.g. 110
    if track_thick < 0:
        track_thick = 0
    draw_arc_segment_aa(surface, angle_start, angle_end,
                        track_outer, track_thick, BLACK)

    # 3) Fill fraction in white
    total_arc = angle_end - angle_start
    frac = min(max(speed / MAX_SPEED, 0.0), 1.0)
    fill_angle = angle_start + frac*total_arc

    draw_arc_segment_aa(surface, angle_start, fill_angle,
                        track_outer, track_thick, WHITE, overlap_deg)

    # 4) Ticks
    draw_speed_ticks(surface, angle_start, angle_end, SCREEN_RADIUS, bar_thickness,
                     major_step=20, minor_step=10, max_speed=MAX_SPEED, color=WHITE)

################################################################################
# Speed Ticks (Anti-Aliased Lines)
################################################################################

def draw_line_aa(surface, color, start_pos, end_pos):
    """Draw a single-pixel anti-aliased line."""
    pygame.draw.aaline(surface, color, start_pos, end_pos)

def draw_speed_ticks(surface, angle_start, angle_end, outer_r, bar_thickness,
                     major_step=20, minor_step=10, max_speed=200, color=WHITE):
    """
    Ticks from outer_r=540 to inner_r=420 (since thickness=120).
    We'll place major ticks every 20 mph with numeric labels, minor ticks every 10 mph unlabeled.
    """
    angle_range = angle_end - angle_start
    bar_inner   = outer_r - bar_thickness  # e.g. 540 - 120 = 420
    label_r     = bar_inner - 15          # e.g. 405

    font_lbl = pygame.font.Font(None, 36)

    def speed_to_angle(spd):
        return angle_start + (spd/max_speed)*angle_range

    spd = 0
    while spd <= max_speed + 0.1:
        a_deg = speed_to_angle(spd)
        rads  = math.radians(-a_deg + 90)

        # major tick if multiple of major_step or near max_speed
        do_label = (abs(spd % major_step) < 0.0001) or (abs(spd - max_speed) < 0.001)

        x_out = CENTER_X + outer_r   * math.cos(rads)
        y_out = CENTER_Y - outer_r   * math.sin(rads)
        x_in  = CENTER_X + bar_inner * math.cos(rads)
        y_in  = CENTER_Y - bar_inner * math.sin(rads)

        draw_line_aa(surface, color, (x_out, y_out), (x_in, y_in))

        if do_label:
            lbl_str  = str(int(spd))
            lbl_surf = font_lbl.render(lbl_str, True, color)
            lx = CENTER_X + label_r * math.cos(rads)
            ly = CENTER_Y - label_r * math.sin(rads)
            lbl_rect = lbl_surf.get_rect(center=(lx, ly))
            surface.blit(lbl_surf, lbl_rect)

        spd += minor_step

################################################################################
# RPM BAR (Thin Arc Hugging the Outer Edge)
################################################################################

def draw_rpm_bar(surface, rpm):
    """
    An RPM bar hugging the speed bar's *outer radius* = 540.
    We'll define thickness=20, so it spans 540..520.
    Angles also 150..390. Color transitions green->yellow->red.
    """
    angle_start = 150
    angle_end   = 390
    overlap_deg = 0.2
    bar_thickness = 20  # thin ring around the outer edge

    # 1) White border ring
    border_t = 5
    draw_arc_segment_aa(surface, angle_start, angle_end,
                        SCREEN_RADIUS, border_t, WHITE)

    # 2) Black track
    track_outer = SCREEN_RADIUS - border_t  # e.g. 535
    track_thick = bar_thickness - border_t  # e.g. 15
    if track_thick < 0:
        track_thick = 0
    draw_arc_segment_aa(surface, angle_start, angle_end,
                        track_outer, track_thick, BLACK)

    # 3) Color fill (green->yellow->red as rpm fraction)
    arc_range = angle_end - angle_start
    frac = min(max(rpm / MAX_RPM, 0.0), 1.0)
    fill_angle = angle_start + arc_range*frac

    # thresholds, e.g. 60% => green->yellow, 90% => yellow->red
    green_thr  = angle_start + 0.60*arc_range
    yellow_thr = angle_start + 0.90*arc_range

    if fill_angle > angle_start:
        end_a = min(fill_angle, green_thr)
        draw_arc_segment_aa(surface, angle_start, end_a, track_outer, track_thick, GREEN, overlap_deg)
    if fill_angle > green_thr:
        end_a = min(fill_angle, yellow_thr)
        draw_arc_segment_aa(surface, green_thr, end_a, track_outer, track_thick, YELLOW, overlap_deg)
    if fill_angle > yellow_thr:
        draw_arc_segment_aa(surface, yellow_thr, fill_angle, track_outer, track_thick, RED, overlap_deg)

################################################################################
# Battery Bar (Right)
################################################################################

def draw_battery_bar(surface, battery_level):
    angle_start = 60
    angle_end   = 120
    overlap     = 0.2
    bar_thick   = 40

    # White border
    border_t = 5
    draw_arc_segment_aa(surface, angle_start, angle_end, SCREEN_RADIUS, border_t, WHITE)

    # Black track
    track_outer = SCREEN_RADIUS - border_t
    track_thick = bar_thick - border_t
    if track_thick < 0:
        track_thick = 0
    draw_arc_segment_aa(surface, angle_start, angle_end, track_outer, track_thick, BLACK)

    # Fill
    frac = max(0.0, min(battery_level, 1.0))
    fill_angle = angle_start + frac*(angle_end - angle_start)
    color_fill = GREEN if battery_level >= 0.2 else RED
    draw_arc_segment_aa(surface, angle_start, fill_angle, track_outer, track_thick, color_fill, overlap)

    # Label
    draw_battery_label_outside(surface, battery_level, angle_start, angle_end, SCREEN_RADIUS + 20)

def draw_battery_label_outside(surface, battery_level, angle_start, angle_end, label_radius):
    mid_angle = (angle_start + angle_end)/2.0
    rads = math.radians(-mid_angle + 90)
    x_lbl = CENTER_X + label_radius * math.cos(rads)
    y_lbl = CENTER_Y - label_radius * math.sin(rads)

    font_batt = pygame.font.Font(None, 36)
    pct = int(battery_level*100)
    txt_str = f"BAT {pct}%"
    txt_surf = font_batt.render(txt_str, True, WHITE)
    txt_rect = txt_surf.get_rect(center=(x_lbl, y_lbl))
    surface.blit(txt_surf, txt_rect)

################################################################################
# Odometer
################################################################################

def draw_odometer(surface, odometer_mi):
    font_odo = pygame.font.Font(None, 24)
    txt = f"Odo: {odometer_mi:.1f}"
    surf = font_odo.render(txt, True, WHITE)
    rect = surf.get_rect(midtop=(CENTER_X, CENTER_Y + 200))
    surface.blit(surf, rect)

################################################################################
# MAIN
################################################################################

def main():
    pygame.init()
    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))
    pygame.display.set_caption("1080p Round Dash - Bigger Speed + Outer RPM Bar")

    clock = pygame.time.Clock()

    # Simulated data
    speed       = 0.0
    speed_dir   = 1
    rpm         = 0.0
    rpm_dir     = 1
    battery_lvl = 0.75
    odometer    = 1234.5

    running = True
    while running:
        for event in pygame.event.get():
            if event.type == QUIT or (event.type == KEYDOWN and event.key == K_ESCAPE):
                running = False

        # Speed updates
        if speed >= MAX_SPEED:
            speed_dir = -1
        elif speed <= 0:
            speed_dir = 1
        speed += speed_dir * 0.5  # slower speed changes

        # RPM updates
        if rpm >= MAX_RPM:
            rpm_dir = -1
        elif rpm <= 0:
            rpm_dir = 1
        rpm += rpm_dir * 100

        # Odometer
        odometer += speed / 3600.0

        # Battery
        battery_lvl -= 0.0001
        if battery_lvl < 0:
            battery_lvl = 1.0

        screen.fill(BLACK)

        # 1) "Bigger" speed bar (thickness=120)
        draw_speed_bar(screen, speed)

        # 2) Outer RPM bar hugging the speed bar's outer radius=540
        draw_rpm_bar(screen, rpm)

        # 3) Battery bar on the right
        draw_battery_bar(screen, battery_lvl)

        # 4) Large speed number
        try:
            font_speed = pygame.font.Font(None, 160)
        except:
            font_speed = pygame.font.Font(None, 160)

        spd_str  = f"{int(speed)}"
        surf_spd = font_speed.render(spd_str, True, WHITE)
        rect_spd = surf_spd.get_rect(center=(CENTER_X, CENTER_Y+20))
        screen.blit(surf_spd, rect_spd)

        # mph label
        font_unit = pygame.font.Font(None, 36)
        mph_surf  = font_unit.render("mph", True, WHITE)
        mph_rect  = mph_surf.get_rect(midtop=(rect_spd.centerx, rect_spd.bottom - 5))
        screen.blit(mph_surf, mph_rect)

        # 5) Odometer
        draw_odometer(screen, odometer)

        pygame.display.flip()
        clock.tick(30)

    pygame.quit()
    sys.exit()


if __name__ == "__main__":
    main()
